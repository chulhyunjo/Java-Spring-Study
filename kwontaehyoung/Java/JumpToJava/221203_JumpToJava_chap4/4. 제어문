# 4-1. if문

---

- 기본적인 비교연산자는 파이썬과 같다.
- `&&`, `||`, `!` 로 `and`, `or`, `not`을 기능한다.
- 파이썬의 `elif`는 java에서 `else if` 로 표현한다.

## contains

- 파이썬의 in과 같다.

```python
# python
if "money" in pocket:
    print("택시를 타고 걸어가라")
```

```java
// java
if (pocket.contains("money")) {
    System.out.println("택시를 타고 걸어가라");
}
```

# 4-2. switch/case 문

---

- if문과 비슷하지만 조금 더 정형화된 조건 판단문

## 기본 구조

```java
switch(입력변수) {
    case 입력값1: ...
        break;
    case 입력값2: ...
        break;
    ...
    default: ...
        break;
}
```

- 입력변수의 값과 일치하는 case 입력값(입력값1, 입력값2…)이 있다면 해당 case문에 속한 문장들이 실행된다.
- 조건에 맞는 case문을 실행한 뒤 switch문을 빠져나가기 위해 case문마다 break가 있다.
- 조건에 맞는 case문이 없을 경우 default문이 실행된다.
- 입력변수로는 byte, short, char, int타입만 가능하다.

# 4-3. while 문

---

## 기본 구조

```java
while (조건문) {
    <수행할 문장1>;
    <수행할 문장2>;
    ...
}
```

- break를 사용하여 while문을 탈출할 수 있다.
- continue를 사용하여 while문의 맨 처음으로 돌아갈 수 있다.

# 4-4. for 문

---

## 기본 구조

```java
String[] numbers = {"one", "two", "three"}
for(int i=0; i<numbers.length; i++) {
    System.out.println(numbers[i]);
}
```

- while문의 break, continue가 동일하게 적용된다.

# 4-5. for each 문

---

## 기본 구조

```java
String[] numbers = {"one", "two", "three"};
for (String number: numbers) {
    System.out.println(number);
}
```

- numbers 자리에는 배열 및 ArrayList자료형만 입력가능하다.
