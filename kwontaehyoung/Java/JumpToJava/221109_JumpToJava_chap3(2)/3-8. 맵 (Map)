# 3-8. 맵 (Map)

---

- Map은 dictionary와 비슷하며 Key와 Value를 한 쌍으로 갖는 자료형
- Associative array, Hash 라고도 불림
- 순차적이지 않음

## HashMap

---

- 자바의 Map 중 가장 간단함
- Map 역시 List와 마찬가지로 인터페이스임
- Map 인터페이스를 구현한 Map자료형에는 HashMap, LinkedHashMap, TreeMap등이 있음
- 인터페이스에 대해서는 객체 지향 챕터에서 다룸

### put

- Map에 key, value 추가

```java
import java.util.HashMap;

public class Sample {
    public static void main(String[] args) {
        HashMap<String, String> map = new HashMap<>();
        map.put("people", "사람");  // put 메소드를 사용하여 key, value 추가
        map.put("baseball", "야구");
    }
}

// HashMap 역시 제네릭스를 이용하였고, 위의 코드의 제네릭스는 Key, Value 모두 String 타입이다.
```

### get

- key에 해당되는 value 값 얻어오기

```java
System.out.println(map.get("people"));  // "사람" 출력
```

- getOrDefault
  - Map의 key에 해당하는 value가 없을 경우 get을 사용한다면 null이 리턴된다.
  - null이 아닌 default 값을 얻고 싶을 경우 getOrDefault 메소드를 사용

```java
System.out.println(map.getOrDefault("java", "자바"));  // "자바" 출력
```

### containsKey

- Map에 해당 key가 있는지를 조사하여 그 결과값을 boolean으로 반환

```java
System.out.println(map.containsKey("people"));

// true 출력
```

### remove

- Map의 항목을 삭제
- key 값에 해당되는 아이템(key, value)을 삭제한 후 그 value 값을 반환

```java
System.out.println(map.remove("people"));

// "사람" 출력
```

### size

- Map의 갯수를 반환

```java
System.out.println(map.size());
```

### keySet

- Map의 모든 key를 모아서 Set 자료형으로 반환

```java
import java.util.HashMap;

public class Sample {
    public static void main(String[] args) {
        HashMap<String, String> map = new HashMap<>();
        map.put("people", "사람");
        map.put("baseball", "야구");
        System.out.println(map.keySet());
    }
}

// [baseball, people] 출력
```

- Set 자료형은 List 자료형으로 바꾸어 사용 가능

```java
List<String> keyList = new ArrayList<>(map.keySet());
```

## LinkedHashMap과 TreeMap

---

- Map의 가장 큰 특징 → 순서에 의존하지 않고, key로 value를 가져옴
- Map에 입력된 순서대로 데이터를 가져오고 싶은 경우 ?
  - LinkedHashMap은 입력된 순서대로 데이터를 저장
- Map에 입력된 key에 의해 정렬된 데이터를 가져오고 싶은 경우?
  - TreeMap은 입력된 key의 오름차순으로 데이터를 저장
